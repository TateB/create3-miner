import encodeQr from "@paulmillr/qr";

import { EthereumProvider } from "@walletconnect/ethereum-provider";
import { createClient, custom, type Address } from "viem";
import {
  simulateContract,
  waitForTransactionReceipt,
  writeContract,
} from "viem/actions";
import { base } from "viem/chains";
import { safeProxyFactoryAbi } from "./abis/SafeProxyFactory";
import { PROXY_FACTORY_L2 } from "./constants";

const expectedAddress = "0x7777a4fAd1C72F8FC314F10058A086a338906777";

const provider = await EthereumProvider.init({
  projectId: "4e2871fd9e66f8264487fe2b1a3d515c",
  showQrModal: false,
  chains: [base.id],
  rpcMap: {
    [base.id]: "https://base.gateway.tenderly.co/4mQkymcbnXGuDO3yoVfHuh",
  },
});

provider.events.on("display_uri", (uri) => {
  console.log("WalletConnect QR:");
  console.log(encodeQr(uri, "ascii"));
});

await provider.connect();

const [address] = await provider.request<Address[]>({ method: "eth_accounts" });

const client = createClient({
  chain: base,
  transport: custom(provider),
});

const simulatedResult = await simulateContract(client, {
  account: address,
  abi: safeProxyFactoryAbi,
  address: PROXY_FACTORY_L2,
  functionName: "createProxyWithNonce",
  args: [
    "0xfb1bffc9d739b8d520daf37df666da4c687191ea",
    "0xb63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000036dbcf1e39861d484155cbe05f7f6ee5b06dda480000000000000000000000002280acf8fe3ea9bd7216bcf1f0bc575fe3381d100000000000000000000000001f2336f8a578fd0e1caeb696425e88b2210708ec0000000000000000000000000000000000000000000000000000000000000000",
    5049431468977370439788703312708158723984868236149922055676938295235812512967n,
  ],
});

if (simulatedResult.result !== expectedAddress) {
  throw new Error(
    `Expected address ${expectedAddress}, got ${simulatedResult.result}`
  );
}

const hash = await writeContract(client, {
  account: address,
  abi: safeProxyFactoryAbi,
  address: PROXY_FACTORY_L2,
  functionName: "createProxyWithNonce",
  args: [
    "0xfb1bffc9d739b8d520daf37df666da4c687191ea",
    "0xb63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000f48f2b2d2a534e402487b3ee7c18c33aec0fe5e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000036dbcf1e39861d484155cbe05f7f6ee5b06dda480000000000000000000000002280acf8fe3ea9bd7216bcf1f0bc575fe3381d100000000000000000000000001f2336f8a578fd0e1caeb696425e88b2210708ec0000000000000000000000000000000000000000000000000000000000000000",
    5049431468977370439788703312708158723984868236149922055676938295235812512967n,
  ],
});

console.log("Transaction hash:", hash);

const receipt = await waitForTransactionReceipt(client, { hash });

console.log("Transaction receipt:", receipt.status);

process.exit(0);
